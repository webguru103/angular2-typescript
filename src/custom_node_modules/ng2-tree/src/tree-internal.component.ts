import { Input, Component, OnInit, ElementRef, Inject } from '@angular/core';
import { Ng2TreeSettings } from './tree.types';
import { Tree } from './tree';
import { TreeService } from './tree.service';
import { Observable } from 'rxjs/Observable';

@Component({
  selector: 'app-tree-internal',
  template: `
  <ul class="tree" *ngIf="tree" [ngClass]="{rootless: isRootHidden()}">
    <li>
      <div class="value-container"
        [ngClass]="{rootless: isRootHidden()}">

        <div class="folding" (click)="tree.switchFoldingType()" [ngClass]="tree.foldingType.cssClass"></div>
        <div class="node-value" [class.node-selected]="isSelected" (click)="onNodeSelected($event)">
            {{tree.value}}
        </div>
      </div>

      <template [ngIf]="tree.isNodeExpanded()">
        <app-tree-internal *ngFor="let child of tree.childrenAsync | async" [tree]="child"></app-tree-internal>
      </template>
    </li>
  </ul>
  `
})
export class TreeInternalComponent implements OnInit {
  @Input()
  public tree: Tree;

  @Input()
  public settings: Ng2TreeSettings;

  public isSelected = false;
  public isMenuVisible = false;

  public constructor( @Inject(TreeService) private treeService: TreeService,
    @Inject(ElementRef) public element: ElementRef) {
  }

  public ngOnInit(): void {
    this.settings = this.settings || { rootIsVisible: false };

    this.treeService.unselectStream(this.tree)
      .subscribe(() => this.isSelected = false);
  }

  public onNodeSelected(e: MouseEvent): void {
    this.isSelected = true;
    this.treeService.fireNodeSelected(this.tree);
  }

  public isRootHidden(): boolean {
    return this.tree.isRoot() && !this.settings.rootIsVisible;
  }
}
